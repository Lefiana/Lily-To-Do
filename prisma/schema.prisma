generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role{
  USER
  ADMIN 
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  createdAt DateTime @default(now())
  role      Role     @default(USER)
  todos     Todo[]
  gachas    Gacha[]
  currency  Currency?
  notes     Notes[]
  journals  Journal[]
  activeThemeItemId String?
  activeThemeItem Item? @relation("ActiveUserTheme", fields: [activeThemeItemId], references: [id])
  timerPresets TimerPreset[] @relation("UserTimerPresets")
}

model Todo {
  id          String    @id @default(cuid())
  title       String
  description String?
  category    String    @default("dailyquest")
  progress    Int       @default(0)
  completed   Boolean   @default(false)
  dailyQuest  Boolean   @default(false)
  deadline    DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  repeatDaily Boolean   @default(false)
}


model Gacha{
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  itemId      String
  item        Item     @relation(fields: [itemId], references: [id])
  createdAt   DateTime @default(now())
}

model Currency{
  id          String   @id @default(cuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id])
  amount      Int      @default(0)
  createdAt   DateTime @default(now())
}

model Item {
  id          String   @id @default(cuid())
  name        String
  description String?
  imageURL    String?
  rarity      Int
  color1      String?  // Hex color for gradient start
  color2      String?  // Hex color for gradient end
  createdAt   DateTime @default(now())
  gachas      Gacha[]
  activeUsers User[]  @relation("ActiveUserTheme")
  @@index([imageURL])
}

model TimerPreset {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation("UserTimerPresets", fields: [userId], references: [id])
  name      String   // e.g., "My Workout"
  tasks     Json     // Store tasks as JSON array
  totalTime Int      // Total session time in seconds
  createdAt DateTime @default(now())

  @@unique([userId, name]) // Prevent duplicate names per user
}

model Notes {
  id String @id @default(cuid())
  userId String
  user User @relation(fields: [userId], references: [id])
  title String
  content String?
  tags String[] @default([])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isFavorite Boolean @default(false)
}

model Journal {
  id String @id @default(cuid())
  userId String
  date DateTime @default(now())
  user User @relation(fields: [userId], references: [id])
  title String
  content String?
  mood String? // e.g., "happy", "sad", "neutral"
  tags String[] @default([])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}